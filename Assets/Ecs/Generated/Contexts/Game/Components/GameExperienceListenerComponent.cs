//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity
{
	public ExperienceListenerComponent ExperienceListener { get { return (ExperienceListenerComponent)GetComponent(GameComponentsLookup.ExperienceListener); } }
	public bool HasExperienceListener { get { return HasComponent(GameComponentsLookup.ExperienceListener); } }

	public void AddExperienceListener()
	{
		var index = GameComponentsLookup.ExperienceListener;
		var component = (ExperienceListenerComponent)CreateComponent(index, typeof(ExperienceListenerComponent));
		AddComponent(index, component);
	}

	public void ReplaceExperienceListener()
	{
		ReplaceComponent(GameComponentsLookup.ExperienceListener, ExperienceListener);
	}

	public void RemoveExperienceListener()
	{
		RemoveComponent(GameComponentsLookup.ExperienceListener);
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher
{
	static JCMG.EntitasRedux.IMatcher<GameEntity> _matcherExperienceListener;

	public static JCMG.EntitasRedux.IMatcher<GameEntity> ExperienceListener
	{
		get
		{
			if (_matcherExperienceListener == null)
			{
				var matcher = (JCMG.EntitasRedux.Matcher<GameEntity>)JCMG.EntitasRedux.Matcher<GameEntity>.AllOf(GameComponentsLookup.ExperienceListener);
				matcher.ComponentNames = GameComponentsLookup.ComponentNames;
				_matcherExperienceListener = matcher;
			}

			return _matcherExperienceListener;
		}
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity
{
	public System.IDisposable SubscribeExperience(OnGameExperience value, bool invokeOnSubscribe = true)
	{
		var componentListener = HasExperienceListener
			? ExperienceListener
			: (ExperienceListenerComponent)CreateComponent(GameComponentsLookup.ExperienceListener, typeof(ExperienceListenerComponent));
		componentListener.Delegate += value;
		ReplaceComponent(GameComponentsLookup.ExperienceListener, componentListener);
		if(invokeOnSubscribe && HasComponent(GameComponentsLookup.Experience))
		{
			var component = Experience;
			value(this, component.Value);
		}

		return new JCMG.EntitasRedux.Events.EventDisposable<OnGameExperience>(CreationIndex, value, UnsubscribeExperience);
	}

	private void UnsubscribeExperience(int creationIndex, OnGameExperience value)
	{
		if(!IsEnabled || CreationIndex != creationIndex)
			return;

		var index = GameComponentsLookup.ExperienceListener;
		var component = ExperienceListener;
		component.Delegate -= value;
		if (ExperienceListener.IsEmpty)
		{
			RemoveComponent(index);
		}
		else
		{
			ReplaceComponent(index, component);
		}
	}
}
