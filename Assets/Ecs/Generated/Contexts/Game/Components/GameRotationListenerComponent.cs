//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity
{
	public RotationListenerComponent RotationListener { get { return (RotationListenerComponent)GetComponent(GameComponentsLookup.RotationListener); } }
	public bool HasRotationListener { get { return HasComponent(GameComponentsLookup.RotationListener); } }

	public void AddRotationListener()
	{
		var index = GameComponentsLookup.RotationListener;
		var component = (RotationListenerComponent)CreateComponent(index, typeof(RotationListenerComponent));
		AddComponent(index, component);
	}

	public void ReplaceRotationListener()
	{
		ReplaceComponent(GameComponentsLookup.RotationListener, RotationListener);
	}

	public void RemoveRotationListener()
	{
		RemoveComponent(GameComponentsLookup.RotationListener);
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher
{
	static JCMG.EntitasRedux.IMatcher<GameEntity> _matcherRotationListener;

	public static JCMG.EntitasRedux.IMatcher<GameEntity> RotationListener
	{
		get
		{
			if (_matcherRotationListener == null)
			{
				var matcher = (JCMG.EntitasRedux.Matcher<GameEntity>)JCMG.EntitasRedux.Matcher<GameEntity>.AllOf(GameComponentsLookup.RotationListener);
				matcher.ComponentNames = GameComponentsLookup.ComponentNames;
				_matcherRotationListener = matcher;
			}

			return _matcherRotationListener;
		}
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity
{
	public System.IDisposable SubscribeRotation(OnGameRotation value, bool invokeOnSubscribe = true)
	{
		var componentListener = HasRotationListener
			? RotationListener
			: (RotationListenerComponent)CreateComponent(GameComponentsLookup.RotationListener, typeof(RotationListenerComponent));
		componentListener.Delegate += value;
		ReplaceComponent(GameComponentsLookup.RotationListener, componentListener);
		if(invokeOnSubscribe && HasComponent(GameComponentsLookup.Rotation))
		{
			var component = Rotation;
			value(this, component.Value);
		}

		return new JCMG.EntitasRedux.Events.EventDisposable<OnGameRotation>(CreationIndex, value, UnsubscribeRotation);
	}

	private void UnsubscribeRotation(int creationIndex, OnGameRotation value)
	{
		if(!IsEnabled || CreationIndex != creationIndex)
			return;

		var index = GameComponentsLookup.RotationListener;
		var component = RotationListener;
		component.Delegate -= value;
		if (RotationListener.IsEmpty)
		{
			RemoveComponent(index);
		}
		else
		{
			ReplaceComponent(index, component);
		}
	}
}
