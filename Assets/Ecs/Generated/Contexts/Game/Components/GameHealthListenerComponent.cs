//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity
{
	public HealthListenerComponent HealthListener { get { return (HealthListenerComponent)GetComponent(GameComponentsLookup.HealthListener); } }
	public bool HasHealthListener { get { return HasComponent(GameComponentsLookup.HealthListener); } }

	public void AddHealthListener()
	{
		var index = GameComponentsLookup.HealthListener;
		var component = (HealthListenerComponent)CreateComponent(index, typeof(HealthListenerComponent));
		AddComponent(index, component);
	}

	public void ReplaceHealthListener()
	{
		ReplaceComponent(GameComponentsLookup.HealthListener, HealthListener);
	}

	public void RemoveHealthListener()
	{
		RemoveComponent(GameComponentsLookup.HealthListener);
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher
{
	static JCMG.EntitasRedux.IMatcher<GameEntity> _matcherHealthListener;

	public static JCMG.EntitasRedux.IMatcher<GameEntity> HealthListener
	{
		get
		{
			if (_matcherHealthListener == null)
			{
				var matcher = (JCMG.EntitasRedux.Matcher<GameEntity>)JCMG.EntitasRedux.Matcher<GameEntity>.AllOf(GameComponentsLookup.HealthListener);
				matcher.ComponentNames = GameComponentsLookup.ComponentNames;
				_matcherHealthListener = matcher;
			}

			return _matcherHealthListener;
		}
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity
{
	public System.IDisposable SubscribeHealth(OnGameHealth value, bool invokeOnSubscribe = true)
	{
		var componentListener = HasHealthListener
			? HealthListener
			: (HealthListenerComponent)CreateComponent(GameComponentsLookup.HealthListener, typeof(HealthListenerComponent));
		componentListener.Delegate += value;
		ReplaceComponent(GameComponentsLookup.HealthListener, componentListener);
		if(invokeOnSubscribe && HasComponent(GameComponentsLookup.Health))
		{
			var component = Health;
			value(this, component.Value);
		}

		return new JCMG.EntitasRedux.Events.EventDisposable<OnGameHealth>(CreationIndex, value, UnsubscribeHealth);
	}

	private void UnsubscribeHealth(int creationIndex, OnGameHealth value)
	{
		if(!IsEnabled || CreationIndex != creationIndex)
			return;

		var index = GameComponentsLookup.HealthListener;
		var component = HealthListener;
		component.Delegate -= value;
		if (HealthListener.IsEmpty)
		{
			RemoveComponent(index);
		}
		else
		{
			ReplaceComponent(index, component);
		}
	}
}
