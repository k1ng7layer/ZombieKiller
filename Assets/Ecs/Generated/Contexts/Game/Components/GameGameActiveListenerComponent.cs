//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity
{
	public GameActiveListenerComponent GameActiveListener { get { return (GameActiveListenerComponent)GetComponent(GameComponentsLookup.GameActiveListener); } }
	public bool HasGameActiveListener { get { return HasComponent(GameComponentsLookup.GameActiveListener); } }

	public void AddGameActiveListener()
	{
		var index = GameComponentsLookup.GameActiveListener;
		var component = (GameActiveListenerComponent)CreateComponent(index, typeof(GameActiveListenerComponent));
		AddComponent(index, component);
	}

	public void ReplaceGameActiveListener()
	{
		ReplaceComponent(GameComponentsLookup.GameActiveListener, GameActiveListener);
	}

	public void RemoveGameActiveListener()
	{
		RemoveComponent(GameComponentsLookup.GameActiveListener);
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher
{
	static JCMG.EntitasRedux.IMatcher<GameEntity> _matcherGameActiveListener;

	public static JCMG.EntitasRedux.IMatcher<GameEntity> GameActiveListener
	{
		get
		{
			if (_matcherGameActiveListener == null)
			{
				var matcher = (JCMG.EntitasRedux.Matcher<GameEntity>)JCMG.EntitasRedux.Matcher<GameEntity>.AllOf(GameComponentsLookup.GameActiveListener);
				matcher.ComponentNames = GameComponentsLookup.ComponentNames;
				_matcherGameActiveListener = matcher;
			}

			return _matcherGameActiveListener;
		}
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity
{
	public System.IDisposable SubscribeActive(OnGameActive value, bool invokeOnSubscribe = true)
	{
		var componentListener = HasGameActiveListener
			? GameActiveListener
			: (GameActiveListenerComponent)CreateComponent(GameComponentsLookup.GameActiveListener, typeof(GameActiveListenerComponent));
		componentListener.Delegate += value;
		ReplaceComponent(GameComponentsLookup.GameActiveListener, componentListener);
		if(invokeOnSubscribe && HasComponent(GameComponentsLookup.Active))
		{
			value(this);
		}

		return new JCMG.EntitasRedux.Events.EventDisposable<OnGameActive>(CreationIndex, value, UnsubscribeActive);
	}

	private void UnsubscribeActive(int creationIndex, OnGameActive value)
	{
		if(!IsEnabled || CreationIndex != creationIndex)
			return;

		var index = GameComponentsLookup.GameActiveListener;
		var component = GameActiveListener;
		component.Delegate -= value;
		if (GameActiveListener.IsEmpty)
		{
			RemoveComponent(index);
		}
		else
		{
			ReplaceComponent(index, component);
		}
	}
}
