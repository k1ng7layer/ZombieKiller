//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity
{
	public ActiveListenerComponent ActiveListener { get { return (ActiveListenerComponent)GetComponent(GameComponentsLookup.ActiveListener); } }
	public bool HasActiveListener { get { return HasComponent(GameComponentsLookup.ActiveListener); } }

	public void AddActiveListener()
	{
		var index = GameComponentsLookup.ActiveListener;
		var component = (ActiveListenerComponent)CreateComponent(index, typeof(ActiveListenerComponent));
		AddComponent(index, component);
	}

	public void ReplaceActiveListener()
	{
		ReplaceComponent(GameComponentsLookup.ActiveListener, ActiveListener);
	}

	public void RemoveActiveListener()
	{
		RemoveComponent(GameComponentsLookup.ActiveListener);
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher
{
	static JCMG.EntitasRedux.IMatcher<GameEntity> _matcherActiveListener;

	public static JCMG.EntitasRedux.IMatcher<GameEntity> ActiveListener
	{
		get
		{
			if (_matcherActiveListener == null)
			{
				var matcher = (JCMG.EntitasRedux.Matcher<GameEntity>)JCMG.EntitasRedux.Matcher<GameEntity>.AllOf(GameComponentsLookup.ActiveListener);
				matcher.ComponentNames = GameComponentsLookup.ComponentNames;
				_matcherActiveListener = matcher;
			}

			return _matcherActiveListener;
		}
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity
{
	public System.IDisposable SubscribeActive(OnGameActive value, bool invokeOnSubscribe = true)
	{
		var componentListener = HasActiveListener
			? ActiveListener
			: (ActiveListenerComponent)CreateComponent(GameComponentsLookup.ActiveListener, typeof(ActiveListenerComponent));
		componentListener.Delegate += value;
		ReplaceComponent(GameComponentsLookup.ActiveListener, componentListener);
		if(invokeOnSubscribe && HasComponent(GameComponentsLookup.Active))
		{
			value(this);
		}

		return new JCMG.EntitasRedux.Events.EventDisposable<OnGameActive>(CreationIndex, value, UnsubscribeActive);
	}

	private void UnsubscribeActive(int creationIndex, OnGameActive value)
	{
		if(!IsEnabled || CreationIndex != creationIndex)
			return;

		var index = GameComponentsLookup.ActiveListener;
		var component = ActiveListener;
		component.Delegate -= value;
		if (ActiveListener.IsEmpty)
		{
			RemoveComponent(index);
		}
		else
		{
			ReplaceComponent(index, component);
		}
	}
}
