//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity
{
	public DeadListenerComponent DeadListener { get { return (DeadListenerComponent)GetComponent(GameComponentsLookup.DeadListener); } }
	public bool HasDeadListener { get { return HasComponent(GameComponentsLookup.DeadListener); } }

	public void AddDeadListener()
	{
		var index = GameComponentsLookup.DeadListener;
		var component = (DeadListenerComponent)CreateComponent(index, typeof(DeadListenerComponent));
		AddComponent(index, component);
	}

	public void ReplaceDeadListener()
	{
		ReplaceComponent(GameComponentsLookup.DeadListener, DeadListener);
	}

	public void RemoveDeadListener()
	{
		RemoveComponent(GameComponentsLookup.DeadListener);
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher
{
	static JCMG.EntitasRedux.IMatcher<GameEntity> _matcherDeadListener;

	public static JCMG.EntitasRedux.IMatcher<GameEntity> DeadListener
	{
		get
		{
			if (_matcherDeadListener == null)
			{
				var matcher = (JCMG.EntitasRedux.Matcher<GameEntity>)JCMG.EntitasRedux.Matcher<GameEntity>.AllOf(GameComponentsLookup.DeadListener);
				matcher.ComponentNames = GameComponentsLookup.ComponentNames;
				_matcherDeadListener = matcher;
			}

			return _matcherDeadListener;
		}
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity
{
	public System.IDisposable SubscribeDead(OnGameDead value, bool invokeOnSubscribe = true)
	{
		var componentListener = HasDeadListener
			? DeadListener
			: (DeadListenerComponent)CreateComponent(GameComponentsLookup.DeadListener, typeof(DeadListenerComponent));
		componentListener.Delegate += value;
		ReplaceComponent(GameComponentsLookup.DeadListener, componentListener);
		if(invokeOnSubscribe && HasComponent(GameComponentsLookup.Dead))
		{
			value(this);
		}

		return new JCMG.EntitasRedux.Events.EventDisposable<OnGameDead>(CreationIndex, value, UnsubscribeDead);
	}

	private void UnsubscribeDead(int creationIndex, OnGameDead value)
	{
		if(!IsEnabled || CreationIndex != creationIndex)
			return;

		var index = GameComponentsLookup.DeadListener;
		var component = DeadListener;
		component.Delegate -= value;
		if (DeadListener.IsEmpty)
		{
			RemoveComponent(index);
		}
		else
		{
			ReplaceComponent(index, component);
		}
	}
}
